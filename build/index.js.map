{"version":3,"sources":["../src/index.js"],"names":["LOG","PY","__dirname","WindowStream","Readable","constructor","delay","options","objectMode","highWaterMark","args","p","join","_resetBuffer","timeP","stderr","on","data","buffer","Buffer","concat","s","JSON","parse","timeN","Date","getTime","t","Math","max","timeout","setTimeout","push","err","message","clearTimeout","_read","destroying","stdin","write","_destroy","kill"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,MAAMA,MAAM,oBAAS,aAAT,CAAZ;AACA,MAAMC,KAAK,mBAAQC,SAAR,EAAmB,QAAnB,CAAX;AAEA;;;;;AAKA;;;;AAGe,MAAMC,YAAN,SAA2BC,gBAA3B,CAAoC;AACjDC,cAAY;AACVC,YAAQ,IADE;AAEV,OAAGC;AAFO,MAGR,EAHJ,EAGQ;AACN,UAAM;AACJC,kBAAY,IADR;AAEJC,qBAAe,CAFX;AAGJ,SAAGF;AAHC,KAAN;AAMA,UAAMG,OAAO,CAACT,EAAD,EAAK,CAAL,CAAb;AAEA,SAAKU,CAAL,GAAS,0BAAM,QAAN,EAAgBD,IAAhB,CAAT;AACAV,QAAI,OAAJ,EAAa,QAAb,EAAuBU,KAAKE,IAAL,CAAU,GAAV,CAAvB;;AAEA,SAAKC,YAAL;;AACA,SAAKC,KAAL,GAAa,CAAb;AAEA,SAAKH,CAAL,CAAOI,MAAP,CAAcC,EAAd,CAAiB,MAAjB,EAA0BC,IAAD,IAAU;AACjCjB,UAAI,2BAAJ;AACA,WAAKkB,MAAL,GAAcC,OAAOC,MAAP,CAAc,CAAC,KAAKF,MAAN,EAAcD,IAAd,CAAd,CAAd;;AACA,UAAI;AACF,cAAMI,IAAIC,KAAKC,KAAL,CAAW,KAAKL,MAAhB,CAAV;;AACA,aAAKL,YAAL;;AACA,cAAMW,QAAQ,IAAIC,IAAJ,GAAWC,OAAX,EAAd;AACA,cAAMC,IAAIC,KAAKC,GAAL,CAASvB,QAAQ,KAAKQ,KAAb,GAAqBU,KAA9B,EAAqC,CAArC,CAAV;AAEAxB,YAAI,YAAJ,EAAkB2B,CAAlB;AACA,aAAKG,OAAL,GAAeC,WAAW,MAAM;AAC9B/B,cAAI,gBAAJ,EAAsB2B,CAAtB;AACA,eAAKK,IAAL,CAAUX,CAAV;AACA,eAAKP,KAAL,GAAa,IAAIW,IAAJ,GAAWC,OAAX,EAAb;AACD,SAJc,EAIZC,CAJY,CAAf;AAKD,OAZD,CAYE,OAAOM,GAAP,EAAY;AACZjC,YAAIiC,IAAIC,OAAR;AACD;AACF,KAlBD;AAmBA,SAAKvB,CAAL,CAAOK,EAAP,CAAU,MAAV,EAAkB,MAAM;AACtBhB,UAAI,MAAJ;AACAmC,mBAAa,KAAKL,OAAlB;AACA,WAAKE,IAAL,CAAU,IAAV;AACD,KAJD;AAKD;;AAEDnB,iBAAe;AACb,SAAKK,MAAL,GAAc,IAAIC,MAAJ,CAAW,EAAX,CAAd;AACD;;AAEDiB,UAAQ;AACNpC,QAAI,OAAJ;;AACA,QAAI,CAAC,KAAKqC,UAAV,EAAsB;AACpB,WAAK1B,CAAL,CAAO2B,KAAP,CAAaC,KAAb,CAAmB,IAAnB;AACD,KAFD,MAEO;AACLvC,UAAI,iCAAJ;AACD;AACF;;AAEDwC,aAAW;AACT,SAAKH,UAAL,GAAkB,IAAlB;AACArC,QAAI,SAAJ;AACA,SAAKW,CAAL,CAAO8B,IAAP;AACD;;AA9DgD","sourcesContent":["import { resolve } from 'path'\nimport { spawn } from 'child_process'\nimport { Readable } from 'stream'\nimport { debuglog } from 'util'\n\nconst LOG = debuglog('window-info')\nconst PY = resolve(__dirname, 'run.py')\n\n/**\n * @typedef {Object} Config\n * @property {number} delay How long wait before pushing new data.\n */\n\n/**\n * A readable stream which emits information about windows.\n */\nexport default class WindowStream extends Readable {\n  constructor({\n    delay = 1000,\n    ...options\n  } = {}) {\n    super({\n      objectMode: true,\n      highWaterMark: 0,\n      ...options,\n    })\n\n    const args = [PY, 1]\n\n    this.p = spawn('python', args)\n    LOG('%s %s', 'python', args.join(' '))\n\n    this._resetBuffer()\n    this.timeP = 0\n\n    this.p.stderr.on('data', (data) => {\n      LOG('received data from python')\n      this.buffer = Buffer.concat([this.buffer, data])\n      try {\n        const s = JSON.parse(this.buffer)\n        this._resetBuffer()\n        const timeN = new Date().getTime()\n        const t = Math.max(delay + this.timeP - timeN, 0)\n\n        LOG('timeout %s', t)\n        this.timeout = setTimeout(() => {\n          LOG('timeout out %s', t)\n          this.push(s)\n          this.timeP = new Date().getTime()\n        }, t)\n      } catch (err) {\n        LOG(err.message)\n      }\n    })\n    this.p.on('exit', () => {\n      LOG('EXIT')\n      clearTimeout(this.timeout)\n      this.push(null)\n    })\n  }\n\n  _resetBuffer() {\n    this.buffer = new Buffer('')\n  }\n\n  _read() {\n    LOG('_read')\n    if (!this.destroying) {\n      this.p.stdin.write('\\n')\n    } else {\n      LOG('skip read because of destroying')\n    }\n  }\n\n  _destroy() {\n    this.destroying = true\n    LOG('destroy')\n    this.p.kill()\n  }\n}\n"],"file":"index.js"}